pipeline {
    agent any
    parameters {
        // Parameters for Data Image
        string(name: 'PBF_URL', defaultValue: 'https://download.geofabrik.de/europe/france-latest.osm.pbf', description: 'osm pbf url')
        string(name: 'COVERAGE', defaultValue : 'europe', description: 'data image tag')
        string(name: 'VALHALLA_VERSION', defaultValue : '3.1.2', description: 'data image version')
        string(name: 'ELEVATION_BBOX', defaultValue : '-10.08 8.34 35.81 51.28', description: 'elevation bounding box, default value is for europe')
        string(name: 'SEARCH_RADIUS', defaultValue : '20', description: 'search radius used for coordinate projection')
        string(name: 'MINIO_HOST', defaultValue: 'http://vippriv-asgard-prd-minio.canaltp.prod', description: 'minio prod')
    }
    options {
        ansiColor('xterm')
    }
    stages {
        stage('Download pbf') {
            agent {
                docker {
                    image 'valhalla/valhalla:run-${VALHALLA_VERSION}'
                    reuseNode true
                }
            }
            steps {
                sh 'mkdir osmpbf'
                dir('osmpbf') {
                    sh "for pbf in ${PBF_URL}; do (wget --progress=bar:force:noscroll \${pbf}) ; done"
                }
            }
        }
        stage('Valhalla build config') {
            agent {
                docker {
                    image 'valhalla/valhalla:run-${VALHALLA_VERSION}'
                    reuseNode true
                }
            }
            steps {
                sh 'valhalla_build_config --mjolnir-tile-dir ${PWD}/valhalla_tiles --additional-data-elevation ${PWD}/elevation_tiles > valhalla.json'
            }
        }
        stage('Valhalla build elevation') {
            agent {
                docker {
                    image 'valhalla/valhalla:run-${VALHALLA_VERSION}'
                    reuseNode true
                }
            }
            steps {
                sh 'valhalla_build_elevation $ELEVATION_BBOX ${PWD}/elevation_tiles $(nproc)'
            }
        }
        stage('Valhalla build tiles') {
            agent {
                docker {
                    image 'valhalla/valhalla:run-${VALHALLA_VERSION}'
                    reuseNode true
                }
            }
            steps {
                sh 'valhalla_build_tiles -c valhalla.json `find ${PWD}/osmpbf -type f`'
                sh """
                    find valhalla_tiles | sort -n | tar cf valhalla_tiles.tar --no-recursion -T -
                    find elevation_tiles | sort -n | tar cf elevation_tiles.tar --no-recursion -T -
                """
            }
        }
        stage('Valhalla prod config') {
            agent {
                docker {
                    image 'valhalla/valhalla:run-${VALHALLA_VERSION}'
                    reuseNode true
                }
            }
            steps {
                sh 'valhalla_build_config --mjolnir-tile-dir /data/valhalla/valhalla_tiles --additional-data-elevation /data/valhalla/elevation_tiles > valhalla.json'
                sh """
                    sed -i 's,\\"minimum_reachability\\"\\: [[:digit:]]*,\\"minimum_reachability\\"\\: 30,' valhalla.json
                    sed -i 's,\\"radius\\"\\: [[:digit:]]*,\\"radius\\"\\: ${SEARCH_RADIUS},' valhalla.json
                    sed -i 's,\\"shortcuts\\"\\: [^,]*,\\"shortcuts\\"\\: false,' valhalla.json
                    sed -i 's,\\"hierarchy\\"\\: [^,]*,\\"hierarchy\\"\\: false,' valhalla.json
                    sed -i 's,\\"import_bike_share_stations\\"\\: [^,]*,\\"import_bike_share_stations\\"\\: true,' valhalla.json
                    sed -i 's,\\"global_synchronized_cache\\"\\: [^,]*,\\"global_synchronized_cache\\"\\: true,' valhalla.json
                    cat valhalla.json
                """
            }
        }
        stage('Upload to minio') {
            agent {
                docker {
                    image 'python:3.9-slim'
                    reuseNode true
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'jenkins-core-minio-prd', usernameVariable: 'MINIO_USER', passwordVariable: 'MINIO_PSWD')]) {
                    sh """
                    python3 -m venv minio-env
                    .  ./minio-env/bin/activate
                    pip3 install -r ./scripts/minio/requirements.txt
                    python3 ./scripts/minio/asgard_minio.py upload valhalla_tiles.tar elevation_tiles.tar valhalla.json -k $MINIO_USER -s $MINIO_PSWD -H $MINIO_HOST -b asgard -c ${COVERAGE} -V ${VALHALLA_VERSION}
                    """

                }
            }
        }
        
    }
    post {
        always {
            deleteDir()
        }
    }
}
